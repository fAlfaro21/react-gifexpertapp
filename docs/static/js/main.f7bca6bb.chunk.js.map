{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imagenes","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAMC,iBAEHJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SAEI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SAnBc,SAACP,GACvBF,EAAcE,EAAMQ,OAAOF,a,+BCLtBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAIbC,EAJa,0FAI4EC,UAAUH,GAJtF,sBAKAI,MAAMF,GALN,cAKbG,EALa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAmBZM,GAnBY,4CAAH,sDCDPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECNwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAE/BqB,KAAM,GACNa,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KAgCA,OAzBAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAM,SAAAC,GAEHC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAIV,CAACpB,IASCqB,ED5B0BM,CAAa3B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAGrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAGEoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAIQA,GAHGA,EAAIC,aEmB5BiB,EAnCM,WAEjB,MAAoC1C,mBAAS,CAAC,aAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KASA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAIA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MCxBpC8B,IAASC,OAEJ,cAAC,EAAD,IAEHC,SAASC,eAAe,W","file":"static/js/main.f7bca6bb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    const handleSumbit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(inputValue.trim().length > 0){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSumbit } >\r\n            {/* <h1> { inputValue } </h1> */}\r\n            <input\r\n                type = \"Text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange } //Permite el cambio del campo, y se va a disparar cada vez que cambie su valor\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n//Como es una funcion async, esta funcion no regresa los gifs, sino que regresa una promesa que resuelve la coleccione de mis imagenes.\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    //el encodeURI se utiliza para quitar/escapar los espacios que la categoria pueda traer, en otras palabras,\r\n    //codifica un string como elemento URI valido (uniform Resource Identifier)\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=KeB0jdXqQbw95WOTVa5cyCQ4l4Ip4icn&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    // console.log(gifs);\r\n    // setImages( gifs );\r\n\r\n    return gifs;\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    //console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src = { url } alt = { title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","//import React, {useState, useEffect} from 'react';\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGigs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    //Aqui utilizo mi Custom Hook: useFetchGifs para traer mi coleccion de imagenes junto con un estado (true o false)\r\n    const { data:images, loading } = useFetchGifs(category);\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>        \r\n\r\n            {/* El && sirve como un if */}\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n\r\n            <div className=\"card-grid\">           \r\n                    {\r\n                        images.map( (img) => (\r\n                            <GifGridItem \r\n                                key = {img.id}\r\n                                //Los 3 puntos significan un SPREAD y se utilizan para enviar las propiedades de las imagenes como una\r\n                                //propiedad independiente\r\n                                {...img} />\r\n                            )\r\n                    )\r\n                    }\r\n            \r\n                {/* <h3> { count } </h3>\r\n                <button onClick = {() => setCount( count + 1 )} ></button> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect( () => {\r\n         \r\n        getGifs(category)\r\n            .then( imagenes => {\r\n\r\n                setTimeout(() => {\r\n\r\n                    setState({\r\n                        data: imagenes,\r\n                        loading: false\r\n                    }) \r\n                    \r\n                }, 2000);\r\n\r\n            }); \r\n         \r\n      }, [category])\r\n\r\n    // setTimeout(() => {\r\n    //     setstate({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state; //{data: [], loading: true}\r\n\r\n}\r\n","//NOTAS:\r\n//Utilizar el snippet rafc para crear la plantilla de react (import y export)\r\n\r\nimport React, {useState} from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Puch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories, 'Nuevo']); //se utiliza el spread, que son los ...\r\n\r\n    //     //otra solucion es aprovechar el callback que devuelve el setCategories\r\n    //     //setCategories(cats => [...cats, 'Nuevo']);\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr/> \r\n\r\n            {/* <button onClick = {handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category=>(\r\n                        <GifGrid \r\n                            key = { category }\r\n                            category = { category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n     <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}